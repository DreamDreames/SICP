(define (element-of-set? x set)
  (cond ((null? set) false)
	((equal? x (car set)) true)
	(else (element-of-set? x (cdr set)))))

(define (adjoin-set x set)
  (if (element-of-set? x set)
    set
    (cons x set)))

(define (intersaction-set set1 set2)
  (cond ((or (null? set1) (null? set2)) '())
	((element-of-set? (car set1) set2) 
	 (cons (car set1) 
	       (intersaction-set (cdr set1) set2)))
	(else (intersaction-set (cdr set1) set2))))

(define (union-set set1 set2)
  (cond ((null? set1) set2)
	((null? set2) set1)
	(else (adjoin-set (car set1) 
			  (union-set (cdr set1) 
				     set2)))))
; another solution with tail recursive
(define (union-set set1 set2)
  (if (null? set1)
    set2
    (union-set (cdr set1) (adjoin-set (car set1) set2))))

(newline)
(display (union-set '(1 2) '(3)))
; (1 2 3)
(newline)
(display (union-set '(1 2) '(3 2)))
; (1 2 3)
(newline)
(display (union-set '(1) '()))
; (1)
(newline)
(display (union-set '() '(1 2)))
; (1 2)

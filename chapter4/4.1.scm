(define (list-of-values exps env)
  (if (no-operands? exps)
    '()
    (cons (eval (first-operand exps) env)
          (list-of-values (rest-operands exps) env))))

(define (left-to-right-list-of-values exps env)
  (if (no-operands? exps)
    '()
    (let ((left (eval (first-operand exps) env))
          (right (left-to-right-list-of-values (rest-operands exps) env)))
      (cons left right))))

(define (right-to-left-list-of-values exps env)
  (if (no-operands? exps)
    '()
    (let ((right (right-to-left-list-of-values (rest-operands exps) env))
          (left (eval (first-operand exps) env)))
      (cons left right))))

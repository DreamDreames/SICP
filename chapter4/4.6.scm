(define (let? exp) (tagged-list exp 'let))
(define (let-clauses exp) (cdr exp))
(define (let->combination exp)
  (expand-let (let-clauses exp)))

(define (expand-let clauses)
  (define (let-vars varexp)
    (if (null? varexp)
      '()
      (cons (car (car varexp)) (let-vars (cdr varexp)))))
  (define (let-exps varexp)
    (if (null? varexp)
      '()
      (cons (cadr (car varexp)) (let-exps (cdr varexp)))))

  (let ((vars (car clauses))
        (body (cadr clauses)))
    (cons (make-lambda (let-vars vars) body)
          (let-exps vars))))
